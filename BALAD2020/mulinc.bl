#!/usr/bin/balad
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  $Id: mulinc.bl 1.2 $
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	LOC 10		; temporary variables
xx:	0
yy:	0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  Format string for PRF command
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	LOC 20
fmt:	"%d * %d = %ld\n"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  Main program calling JMS multiply
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	LOC 100
main:	KDN xx		; Enter multiplicand
	JZR quit	;   quit program if zero
	KDN yy		; Enter mmultiplyer
	JMS multiply
	ADR xx
	ADR yy
	PRF fmt		; print "xx * yy = result\n"
	ADR xx
	ADR yy
	ADR ACC
	JMP main
quit:	HLT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  Simple multiply subroutine using decrement of multiplyer and
;  repeated addition of multiplicand until multiplyer is zero
;  JMS 200
;  ADR xx	; address of single precision multiplicand
;  ADR yy	; address of single precision multiplyer
;  next		; double precision result in ACC (adr 0 and 1)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	LOC 1		; temporary variables
L1:	0
L2:	0
L3:	0

	LOC 200
multiply: 0		; return address
	LDA @multiply
	INC multiply
	LDA @ACC
	STA L2		; multiplicand
	LDA @multiply
	INC multiply
	LDA @ACC
	STA L3		; multiplyer
	CLR ACC
	CLR L1
	TST L3
loop:	JZR @multiply	; return if multiplyer is zero
	CLR C
	ADD L2		; add multiplicand to lo result
	JZC skip
	INC L1		; increment hi result
skip:	DEC L3		; decrement multiplyer
	JMP loop
